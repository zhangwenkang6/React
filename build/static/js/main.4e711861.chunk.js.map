{"version":3,"sources":["import.js","Todolist/Todoing.js","Todolist/Todoinput.js","Todolist/Todolist.js","index.js"],"names":["Component","Todoing","delete","idx","props","delTodo","this","todo","map","item","key","onClick","Todoinput","handleInput","e","keyCode","addTodo","target","value","onKeyDown","type","Request","state","data","Axios","get","then","res","console","log","setState","result","index","album_title","author","ReactDOM","render","document","getElementById","React","createElement","a","b","o","Object","assign","keys","forEach"],"mappings":"wPAGuBA,Y,MCDFC,E,2MACjBC,OAAS,SAACC,GACN,EAAKC,MAAMC,QAAQF,I,wEAEb,IAAD,OACL,OACI,6BACI,wDACA,4BAEQG,KAAKF,MAAMG,KAAKC,KAAI,SAACC,EAAKN,GAAN,OAAc,wBAAIO,IAAOD,GACxCA,EAD6B,SAE9B,4BAAQE,QAAU,kBAAM,EAAKT,OAAOC,KAApC,0B,GAZSH,aCEhBY,E,2MACjBC,YAAc,SAACC,GACM,KAAdA,EAAEC,SACD,EAAKX,MAAMY,QAAQF,EAAEG,OAAOC,Q,wEAG1B,IAAD,OACL,OACI,6BACI,2BAAOC,UAAW,SAACL,GAAD,OAAK,EAAKD,YAAYC,IAAIM,KAAK,c,GAT1BpB,a,GCADA,Y,4DCIjBqB,E,YACjB,aAAc,IAAD,8BACT,+CACKC,MAAQ,CACTC,KAAK,IAHA,E,iFAMO,IAAD,OACfC,IAAMC,IAAI,uDACLC,MAAK,SAACC,GACHC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACVP,KAAMI,EAAIJ,KAAKQ,c,+BAK3B,OACI,6BACI,wDACA,4BAEQzB,KAAKgB,MAAMC,KAAKf,KACZ,SAACC,EAAKuB,GAAN,OACI,wBAAItB,IAAKsB,GACL,4BAAKvB,EAAKwB,aACV,2BAAIxB,EAAKyB,kB,GA1BRlC,aAsCrCmC,IAASC,OAAO,kBAAC,EAAD,MAAWC,SAASC,eAAe,SAwBzCC,IAAMC,cACZ,MACA,CAAC,GAAK,OACN,QACAD,IAAMC,cACF,KACA,CAAC,GAAK,KACN,UAmTR,IAAIC,EAAG,CAACA,EAAE,IAAIC,EAAE,KACZC,EAAIC,OAAOC,OAAO,GAAGJ,GACzBb,QAAQC,IAAIc,IAAIF,GAChBb,QAAQC,IAAIc,GAEZC,OAAOE,KAAKL,GAAGM,SAAQ,SAACtC,GACpBmB,QAAQC,IAAIpB,EAAK,IAAIgC,EAAEhC,S","file":"static/js/main.4e711861.chunk.js","sourcesContent":["import React,{Component,Fragment} from 'react';\r\n\r\n//组件生命周期\r\nclass ShowTime extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            time: new Date().toLocaleString()\r\n        }\r\n        \r\n        console.log('constructor',this.props.word);\r\n\t}\r\n\tstatic getDerivedStateFromProps(nextProps, prevState){\r\n\t\tconsole.log('2-getDerivedStateFromProps');\r\n\t\treturn null;\r\n\t}\r\n    componentDidMount(){\r\n        console.log('componentDidMount');\r\n        setTimeout(()=>{\r\n            console.log(1)\r\n            this.setState({\r\n                time: new Date().toLocaleString()\r\n            })\r\n        },1000)\r\n    }\r\n    shouldComponentUpdate(){\r\n        return true;\r\n    }\r\n    getSnapshotBeforeUpdate(){\r\n\t\tconsole.log('getsnapshot');\r\n\t\treturn true;\r\n    }\r\n    componentDidUpdate(){\r\n        console.log('didupdate');\r\n        \r\n    }\r\n    render(){\r\n        console.log('render');\r\n\r\n        return (\r\n            <Fragment>\r\n                <div>{this.state.time}</div>\r\n                <div>hello{this.props.word}</div>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\n//export default ShowTime; //默认导出\r\n\r\nexport {ShowTime};  //命名导出","import React, { Component } from 'react'\r\n\r\nexport default class Todoing extends Component {\r\n    delete = (idx)=>{\r\n        this.props.delTodo(idx);\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>正在进行</h1>\r\n                <ul>\r\n                    {\r\n                        this.props.todo.map((item,idx) => <li key = {item}>\r\n                            {item}------\r\n                            <button onClick= {() => this.delete(idx)}>\r\n                            删除</button>\r\n                        </li>)\r\n                    }\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\n//子组件---->父组件传递数据，调用子组件时往子组件传递一个函数\r\n// 子组件通过props调用该函数\r\n\r\nexport default class Todoinput extends Component {\r\n    handleInput = (e)=>{\r\n        if(e.keyCode === 13){\r\n            this.props.addTodo(e.target.value);\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input onKeyDown={(e)=>this.handleInput(e)} type=\"text\"/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport Todoing from './Todoing';\r\nimport Todoinput from './Todoinput';\r\n\r\nexport default class Todolist extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            todo:[1,2,3]\r\n        }\r\n    }\r\n    addItem = (msg)=>{\r\n        this.setState({\r\n            todo:[...this.state.todo,msg],\r\n            msg:''\r\n        })  \r\n        console.log(msg);\r\n    }\r\n    delItem =(a) => {\r\n        // this.state.todo.splice(a,1); //不要写\r\n        // 深拷贝\\浅拷贝\r\n        //不要直接改变处理状态，setState是异步的\r\n\r\n        var todo = [...this.state.todo];\r\n        todo.splice(a,1);\r\n        this.setState({\r\n            todo:this.state.todo\r\n        })\r\n        console.log(a);\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Todoinput addTodo={this.addItem}/>\r\n                <Todoing todo = {this.state.todo}\r\n                delTodo ={this.delItem}/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React,{Component,Fragment} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {ShowTime} from './import';\nimport Todolist from \"./Todolist/Todolist\";\nimport PropTypes from 'prop-types';\nimport Axios from 'axios';\n\nexport default class Request extends Component {\n    constructor(){\n        super();\n        this.state = {\n            data:[]\n        }\n    }\n    componentDidMount(){\n        Axios.get('https://api.apiopen.top/musicRankingsDetails?type=1')\n            .then((res)=>{\n                console.log(res);\n                this.setState({\n                    data: res.data.result\n                })\n            })\n    }\n    render() {\n        return (\n            <div>\n                <h1>请求接口</h1>\n                <ul>\n                    {\n                        this.state.data.map(\n                            (item,index)=>(\n                                <li key={index}>\n                                    <h2>{item.album_title}</h2>\n                                    <p>{item.author}</p>\n                                </li>\n                            )\n                        )\n                    }\n                    \n                </ul>\n            </div>\n        )\n    }\n}\n\nReactDOM.render(<Request/>,document.getElementById('root'));\n\n// class Hello extends Component{\n//     render(){\n//         return <h1>hello {this.props.name}</h1>\n//     }\n// }\n// Hello.propTypes = {\n//     name:PropTypes.string.isRequired\n// }\n// Hello.defaultProps = {\n//     name:'world'\n// }\n// ReactDOM.render(\n//     <div style={{ height:'100px' ,backgroundColor : 'red' } }>\n//         <Hello/>\n//         <Hello name = 'zwk'/>\n//     </div>,\n//     document.getElementById('root')\n// );\n\n//ReactDOM.render(<Todolist/>,document.getElementById('root'));\n\n// jsx表达式会被react转成一个对象\nvar ele = React.createElement(\n    'div',\n    {'id':'box'},\n    'hello',\n    React.createElement(\n        'h1',\n        {'id':'h'},\n        'react'\n    )\n);\n//var ele = React.createElement('div',{'id':'box'},'hello',React.createElement(('h1'),{'id':'h'},'react'));\n//ReactDOM.render(<h1>{str} react</h1>,document.getElementById('root'));\n//ReactDOM.render(ele,document.getElementById('root'));\nvar obj = {\n    type: 'div',\n    props: {\n        id: 'box',\n        class: 'box',\n        children: ['hello',{\n            type: 'h1',\n            props: {\n                id: 'h',\n                class: 'h',\n                children: ['react']\n            }\n        }]\n    }\n}\n\n// function tick() { \n// \tconst ele = (\n// \t\t<div>\n// \t\t\t<p>hello world</p>\n// \t\t\t{new Date().toLocaleTimeString()}\n// \t\t</div> \n// \t); \t\n// \tReactDOM.render(ele, document.getElementById('root')); \n// } \n// setInterval(tick, 1000);\n\n//加载html文件、浏览器解析html生成DOM树\n//link解析css规则，和DOM树结合生成render tree,浏览器渲染引擎渲染render tree\n// 页面回流（重排）：内容改变、大小改变、结构改变,肯定会使页面重绘\n// 页面重绘：把字体颜色、背景颜色等样式改变，不一定引起回流\n\n// node.offsetLeft、node.offsetWidth等慎用\n// var root = document.getElementById('root');\n// var width = root.offsetWidth;\n// setInterval(function(){\n//     width += 1\n//     root.style.width = width + 'px';\n// },100)\n\n// display、width、height、font-size等会引起页面回流\n// document.body.style.width = '100px';\n// document.body.style.height = '100px';\n// 声明一个css的一个类\n// .change{\n//     width: 100px;\n//     height: 100px;\n// }\n// document.body.className = 'change';\n\n// console.time('a');\n// var str = '';\n// for(var i=0;i<1000;i++){\n//     str += '<li>'+i+'</li>';\n// }\n// document.body.innerHTML = str;\n// console.timeEnd('a');\n\nfunction render(obj,container){\n    var {type,props} = obj;\n    // 文档碎片\n    var fr = document.createDocumentFragment();\n\n    var ele = document.createElement(type);\n    for(var item in props){\n        if(item === 'class'){\n            ele.className = props[item];\n        }else if(item === 'children'){\n            for(var i=0;i<props[item].length;i++){\n                if(typeof props[item][i] === 'object'){\n                    render(props[item][i],ele);\n                }else{\n                    var txt = document.createTextNode(props[item][i]);\n                    ele.appendChild(txt);\n                }\n            }\n        }else{\n            ele[item] = props[item];\n        }\n    }\n    fr.appendChild(ele);\n    container.appendChild(fr);\n}\n// render(obj,document.getElementById('root'));\n\n// var e = <h1>hello</h1>;\n// ReactDOM.render(ele,document.getElementById('root'));\n\n// 函数定义\n// function Hello(props){\n// \tconsole.log(arguments)\n// \treturn(\n// \t\t<div>\n// \t\t\t<h1>Hello {props.namex}</h1>\n// \t\t\t<h2>你好 {props.namex}</h2>\n// \t\t</div>)\n// } \n\n//类定义\n// class Hello extends React.Component{\n//     handleClick = ()=>{\n//         console.log(this);\n//         this.setState({content:'world'})\n//     }\n// \trender(){\n// \t\t// this就是当前组件，包含\n// \t\t//console.log(this)\n// \t\treturn(\n// \t\t\t<div>\n// \t\t\t\t<h1>Hello {this.props.namex}</h1>\n// \t\t\t\t<h2>你好 {this.props.namex}</h2>\n//                 <button onClick={this.handleClick}>Click</button>\n//  \t\t\t</div>\n// \t\t)\n// \t}\n// } \n// ReactDOM.render(<Hello namex=\"React\"/>, document.getElementById('root'));\n\n// 类定义组件\n// class Hello extends Component{\n//     constructor(){\n//         super();\n//         this.state = {\n// \t\t\ttime: new Date().toLocaleString()\n// \t\t}\n// \t\tsetInterval(()=>{\n// \t\t\tthis.setState({\n// \t\t\t\ttime: new Date().toLocaleString()\n// \t\t\t})\n// \t\t},1000)\n//     }\n//     render(){\n//         return (\n//             <Fragment>\n//                 <div>{this.state.time}</div>\n//                 <div>hello{this.props.word}</div>\n//             </Fragment>\n//         );\n//     }\n// }\n// ReactDOM.render(<Hello word=\"react\"/>,document.getElementById('root'));\n\n// 函数定义组件（无生命周期函数）\n// 当只是渲染结构时\n// function Todo(props){\n//     return (\n//         <div>\n//             {/* 条件渲染 */}\n//             {props.list.length>=6?<h1>todo</h1>:''}\n//             {props.list.length>=5 && <h1>todo</h1>}\n//             <ul>\n//                 {/* 循环渲染 */}\n//                 {\n//                     props.list.map(\n//                         (item,index)=> index%2 === 0&&<li key={item}>{item}</li>\n//                     )\n//                 }\n//             </ul>\n//         </div>\n//     )\n// }\n// var item = [1,2,3,4,5];\n// ReactDOM.render(<Todo list={item}/>,document.getElementById('root'));\n\n\n//ReactDOM.render(<ShowTime word=\"react\"/>,document.getElementById('root'));\n\n// class App extends React.Component {\n// \tconstructor(){\n// \t\tsuper();\n// \t\tthis.state = {\n// \t\t\tcontent:'hello'\n// \t\t}\n// \t}\n// \t//要将事件对象参数放在最后一个\n// \thandleClick = (name,ev)=>{\n// \t\tconsole.log(name);\n// \t\tconsole.log(ev);\n// \t}\n// \t// 将原生的onchange事件进行了优化，实现用户输入的实时响应处理\n// \thandleChange = (e)=>{\n// \t\tconsole.log(e.target.value);\n// \t}\n// \trender() {\n// \t\treturn (\n// \t\t\t<div>\n// \t\t\t\t<p>{this.state.content}</p>\n// \t\t\t\t<input type=\"text\" onChange={this.handleChange}/>\n// \t\t\t\t{/* <button onClick={this.handleClick.bind(this,'liu')}>Click</button> */}\n//                 <button onClick={(e)=> this.handleClick('liu',e)}>Click</button>\n// \t\t\t</div>\n// \t\t)\n// \t}\n// }\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// class TodoList extends Component{\n//     constructor(){\n//         super();\n//         this.state = {\n//             inputValue:'hello'\n//         }\n//     }\n//     // 不设置onChange事件，input无法修改里面的内容，重新设置state，render被调用，重新渲染\n//     handleChange = (e)=>{\n//         this.setState({\n//             inputValue:e.target.value\n//         })\n//     }\n//     render(){\n//         return (\n//             <div>\n//                 <input type=\"text\" onChange={this.handleChange} value={this.state.inputValue}/>\n//                 {/* <input type = 'text'/> //非受控组件 */}\n//                 <button>提交</button>\n//             </div>\n//         )\n//     }\n// }\n\n// ReactDOM.render(\n//     <TodoList />,\n//     document.getElementById('root')\n// );\n\n// class TodoList extends Component{\n//     handleClick = ()=>{\n//         console.log(this.inp.value);\n//         console.log(this.refs);\n//     }\n//     render(){\n//         return (\n//             <div>\n//                 <input type=\"text\" defaultValue='hello' ref={inp=>this.inp = inp}/>\n//                 <button onClick={this.handleClick}>提交</button>\n//             </div>\n//         )\n//     }\n// }\n\n// ReactDOM.render(\n//     <TodoList />,\n//     document.getElementById('root')\n// );\n\n\n// class TodoList extends Component {\n// \tconstructor(props){\n// \t\tsuper(props);\n// \t\tthis.state = {\n// \t\t\tinputValue:'',\n// \t\t\tlist:[]\n// \t\t}\n// \t}\n\n// \thandleChange = (e)=>{\n// \t\tthis.setState({inputValue:e.target.value})\n// \t}\n// \tbuttonCLick = ()=>{\n// \t\tthis.setState({\n// \t\t\tlist:[...this.state.list,this.state.inputValue],\n// \t\t\tinputValue:''\n// \t\t})\n// \t}\n// \titemDelete = (index)=>{\n// \t\tlet list = [...this.state.list];\n// \t\tlist.splice(index,1);\n// \t\tthis.setState({\n// \t\t\tlist:list\n// \t\t})\n// \t}\n// \trender(){\n// \t\treturn(\n// \t\t\t<Fragment>\n// \t\t\t\t<div>\n// \t\t\t\t\t<input type=\"text\" value={this.state.inputValue} onChange={this.handleChange}/>\n// \t\t\t\t\t<button onClick={this.buttonCLick}>添加数据</button>\n// \t\t\t\t</div>\n// \t\t\t\t<ul>\n// \t\t\t\t\t{\n// \t\t\t\t\t\tthis.state.list.map((item,index)=>{\n// \t\t\t\t\t\t\treturn <li key={index}>{item}  --- <button onClick={this.itemDelete.bind(this,index)}>删除</button></li>\n// \t\t\t\t\t\t})\n// \t\t\t\t\t}\n// \t\t\t\t</ul>\n// \t\t\t</Fragment>\n// \t\t)\n// \t}\n// }\n// ReactDOM.render(\n//     <TodoList />,\n//     document.getElementById('root')\n// );\n\n// var arr = [1,2,{a:100}];\n// var b = JSON.parse(JSON.stringify(arr));\n// b[2].a = 200;\n// console.log(arr);\n// console.log(b);\n\n// 对象的拷贝\nvar a= {a:100,b:200};\nvar o = Object.assign({},a);\nconsole.log(o===a);\nconsole.log(o);\n//Object.keys返回由属性名组成的一个数组\nObject.keys(a).forEach((item)=>{\n    console.log(item+':'+a[item]);\n    //console.log(a[item]);\n})\n// 尽量不用for in\n// for(var item in a){\n//     console.log(a);\n// }"],"sourceRoot":""}